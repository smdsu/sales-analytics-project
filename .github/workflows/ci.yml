name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: adminsale
          POSTGRES_PASSWORD: root
          POSTGRES_DB: sales_db
        ports:
          - 5433:5432
        options: >-
          --health-cmd="pg_isready -U adminsale"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      redis:
        image: redis:latest
        env:
          REDIS_PASSWORD: root
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install redis-cli
        run: sudo apt-get update && sudo apt-get install -y redis-tools

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5433; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 5
          done
        
      - name: Wait for Redis to be ready
        run: |
          until redis-cli -h localhost -p 6379 -a root ping; do
            echo "Waiting for Redis to be ready..."
            sleep 5
          done
        
      - name: Configure Redis user
        run: |
          redis-cli -h localhost -p 6379 -a root ACL SETUSER adminsale on '>redisroot' allcommands allkeys

      - name: Run Alembic migrations
        run: |
          alembic upgrade head

      - name: Start FastAPI app in the background
        run: |
          nohup uvicorn app.main:app &
          sleep 5  # Подождите немного, чтобы сервер успел запуститься
      
      - name: Check if FastAPI server is up
        run: |
          until curl -s http://127.0.0.1:8000/; do
            echo "Waiting for FastAPI server to be ready..."
            sleep 5
          done
        
      - name: Run tests with coverage
        env:
          DB_HOST: localhost
          DB_PORT: 5433
          DB_NAME: sales_db
          DB_USER: adminsale
          DB_PASSWORD: root
        run: pytest -v --log-cli-level=INFO --cov=app --cov-report=xml --junitxml=junit.xml -o junit_family=legacy tests/ 

      - name: Run linter
        run: flake8

      - name: Upload test results to Codecov
        uses: codecov/test-results-action@v1
        if: ${{ !cancelled() }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: smdsu/sales-analytics-project